// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode
    Not(in=instruction[15], out=instA);    // 1=A命令
    Not(in=instA, out=instD);             // 1=D命令

    // A命令
    And(a=instA, b=instA, out=loadAReg); // 1=ARegisterを書き換える

    // D命令
    And(a=instD, b=instruction[12], out=readMem);  // 1=ALUにinMを入力

    // cmp
    Mux(a=instruction[9], b=false, sel=readMem, out=zyALU);

    // dest
    And(a=instD, b=instruction[5], out=saveARegTmp);
    Or(a=saveARegTmp, b=loadAReg, out=saveAReg);  // ALU計算結果をAレジスタに保存
    And(a=instD, b=instruction[4], out=saveDReg); // ALU計算結果をDレジスタに保存
    And(a=instD, b=instruction[3], out=saveM);    // ALU計算結果をMemory[A]に保存

    // jmp
    And(a=instD, b=instruction[2], out=j1);
    And(a=instD, b=instruction[1], out=j2);
    And(a=instD, b=instruction[0], out=j3);


    // ARegister
    Mux16(a=outALU, b[15]=false, b[0..14]=instruction[0..14], sel=loadAReg, out=toAReg);
    ARegister(in=toAReg, load=saveAReg, out=fromAReg,
    // addressM
                                        out[15]=false, out[0..14]=addressM);


    // DRegister
    DRegister(in=outALU, load=saveDReg, out=fromDReg);


    // ALU
    Mux16(a=fromAReg, b=inM, sel=readMem, out=toALU);
    ALU(x=fromDReg, y=toALU, zx=instruction[11],
                             nx=instruction[10],
                             zy=zyALU,
                             ny=instruction[8],
                             f= instruction[7],
                             no=instruction[6],
                             zr=zrALU,
                             ng=ngALU,
                             out=outALU, out=outM);


    // writeM
    And(a=instD, b=saveM, out=writeM);


    // jump condition

    // outALU < 0 ?
    Xor(a=ngALU, b=j1, out=tmp1);
    Not(in=tmp1, out=jmp1);
    // outALU = 0 ?
    Xor(a=zrALU, b=j2, out=tmp2);
    Not(in=tmp2, out=jmp2);
    // 0 < outALU ?
    Or(a=zrALU, b=ngALU, out=tmp3);
    Not(in=tmp3, out=grZero);
    Xor(a=grZero, b=j3, out=tmp4);
    Not(in=tmp4, out=jmp3);

    And(a=jmp1, b=jmp2, out=jtmp1);
    And(a=instD, b=jmp3, out=jtmp2);
    And(a=jtmp1, b=jtmp2, out=loadPC); // 1=PCを書き換える


    // program counter
    PC(in=fromAReg, load=loadPC, inc=true, reset=reset, out[15]=false, out[0..14]=pc);
}
